from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, or_f
from aiogram.enums import ParseMode
from datetime import datetime
from database.setup import Database
from config import load_config
from utils.bank import format_name_link, generate_random_account_number

config = load_config()
db = Database(config.bot.database)
router = Router()

from database.queries import (
    get_user,
    get_bank_account,
    get_deposit_account,
)

DEPOSIT_OPTIONS = {
    "1_day":    {"days": 1,  "rate": 1.1,  "fee": 0.0},
    "1_week":   {"days": 7,  "rate": 3.0,  "fee": 1.5},
    "3_weeks":  {"days": 21, "rate": 10.0, "fee": 4.0},
    "1_month":  {"days": 30, "rate": 15.0, "fee": 7.0},
    "3_months": {"days": 90, "rate": 45.0, "fee": 12.0},
}

PERSONAL_ACCOUNT_OPEN_COST = 100
DEPOSIT_ACCOUNT_OPEN_COST = 0
TRANSFER_FEE_PERCENT = 3.0
TRANSFER_DAILY_LIMIT = 3_000_000

HEADER = "üè¶ <b>PaketBank</b>\n\n"


# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç ---

@router.message(or_f(
    Command("bank"),
    F.text.casefold() == "–±–∞–Ω–∫",
    F.text.casefold() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ"
))
async def bank_info(message: Message):
    user_id = message.from_user.id
    user = await get_user(db, user_id)
    bank_account = await get_bank_account(db, user_id)
    deposit_account = await get_deposit_account(db, user_id)
    name = format_name_link(message.from_user)

    if not bank_account:
        await message.answer(
            HEADER +
            f"üë§ <b>{name}</b>\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π <code>/create_bank</code>",
            parse_mode=ParseMode.HTML
        )
        return

    account_number = bank_account["account_number"]
    balance = bank_account["balance"]
    vip_status = "–û–±—ã—á–Ω—ã–π"  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É VIP –∏–∑ user

    if deposit_account:
        deposit_balance = deposit_account["start_balance"]
        deposit_percent = deposit_account["percent"]
        commission = deposit_account["commission"]
        withdraw_possible = "–î–∞"
    else:
        deposit_balance = 0
        deposit_percent = 0
        commission = 0
        withdraw_possible = "–ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞"

    text = (
        HEADER +
        f"üë§ –ò–≥—Ä–æ–∫, –≤–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç <code>#{account_number}</code>\n\n"
        f"üí∞ –î–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ: {balance}$\n"
        f"üíé –°—Ç–∞—Ç—É—Å VIP: {vip_status}\n"
        f"„ÄΩ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥ –¥–µ–ø–æ–∑–∏—Ç: {deposit_percent}%\n"
        f"üí± –ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞: {commission}%\n"
        f"üíµ –ü–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–æ–º: {deposit_balance} PaketCoins\n"
        f"‚è≥ –ú–æ–∂–Ω–æ —Å–Ω—è—Ç—å: {withdraw_possible}"
    )
    await message.answer(text, parse_mode=ParseMode.HTML)


@router.message(or_f(
    Command("create_bank"),
    F.text.casefold() == "–±–∞–Ω–∫ —Å–æ–∑–¥–∞—Ç—å",
    F.text.casefold() == "—Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç"
))
async def create_bank(message: Message):
    user_id = message.from_user.id
    bank_account = await get_bank_account(db, user_id)
    if bank_account:
        await message.answer(HEADER + "‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç.", parse_mode=ParseMode.HTML)
        return

    user = await get_user(db, user_id)
    if not user or user["balance"] < PERSONAL_ACCOUNT_OPEN_COST:
        await message.answer(HEADER + f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞ ({PERSONAL_ACCOUNT_OPEN_COST} PaketCoins).", parse_mode=ParseMode.HTML)
        return

    new_balance = user["balance"] - PERSONAL_ACCOUNT_OPEN_COST
    account_number = await generate_random_account_number()

    await db.execute(
        "INSERT INTO bank_accounts (user_id, balance, account_number) VALUES (?, ?, ?)",
        (user_id, 0, account_number)
    )
    await db.execute(
        "UPDATE users SET balance = ? WHERE user_id = ?",
        (new_balance, user_id)
    )

    await message.answer(
        HEADER +
        f"‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n"
        f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: <b>{account_number}</b>\n"
        f"–° –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–∏—Å–∞–Ω–æ {PERSONAL_ACCOUNT_OPEN_COST} PaketCoins.\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> PaketCoins.",
        parse_mode=ParseMode.HTML
    )


@router.message(or_f(
    Command("balance_bank"),
    F.text.casefold() == "–±–∞–Ω–∫ –∏–Ω—Ñ–æ",
    F.text.casefold() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—á–µ—Ç–∞"
))
async def balance_bank(message: Message):
    user_id = message.from_user.id
    bank_account = await get_bank_account(db, user_id)
    if not bank_account:
        await message.answer(HEADER + "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /create_bank", parse_mode=ParseMode.HTML)
        return

    await message.answer(
        HEADER +
        f"üè¶ –ë–∞–ª–∞–Ω—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞:\n"
        f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: <b>{bank_account['account_number']}</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{bank_account['balance']}</b> PaketCoins",
        parse_mode=ParseMode.HTML
    )


@router.message(or_f(
    Command("transfer_bank"),
    F.text.casefold().startswith("–±–∞–Ω–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏"),
    F.text.casefold().startswith("–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"),
))
async def transfer_bank(message: Message):
    args = message.text.split()
    if len(args) < 3:
        await message.answer(HEADER + "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer_bank <–Ω–æ–º–µ—Ä_—Å—á—ë—Ç–∞> <—Å—É–º–º–∞>", parse_mode=ParseMode.HTML)
        return

    user_id = message.from_user.id
    to_account_number = args[1]
    try:
        amount = int(args[2])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(HEADER + "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", parse_mode=ParseMode.HTML)
        return

    sender_account = await get_bank_account(db, user_id)
    if not sender_account:
        await message.answer(HEADER + "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞.", parse_mode=ParseMode.HTML)
        return

    recipient_account = await db.fetchrow("SELECT * FROM bank_accounts WHERE account_number = ?", (to_account_number,))
    if not recipient_account:
        await message.answer(HEADER + "‚ùó –°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)
        return

    if amount > TRANSFER_DAILY_LIMIT:
        await message.answer(HEADER + f"‚ùó –õ–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–µ–Ω—å ‚Äî {TRANSFER_DAILY_LIMIT:,} PaketCoins.", parse_mode=ParseMode.HTML)
        return

    fee = int(amount * TRANSFER_FEE_PERCENT / 100)
    total = amount + fee

    if sender_account["balance"] < total:
        await message.answer(HEADER + f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {sender_account['balance']} PaketCoins.", parse_mode=ParseMode.HTML)
        return

    new_sender_balance = sender_account["balance"] - total
    new_recipient_balance = recipient_account["balance"] + amount

    await db.execute("UPDATE bank_accounts SET balance = ? WHERE user_id = ?", (new_sender_balance, user_id))
    await db.execute("UPDATE bank_accounts SET balance = ? WHERE user_id = ?", (new_recipient_balance, recipient_account["user_id"]))

    await message.answer(
        HEADER +
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
        f"–°—É–º–º–∞: <b>{amount:,}</b> PaketCoins\n"
        f"–ö–æ–º–∏—Å—Å–∏—è: <b>{fee:,}</b> PaketCoins\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_sender_balance:,}</b> PaketCoins",
        parse_mode=ParseMode.HTML
    )


@router.message(or_f(
    Command("replenish_bank"),
    F.text.casefold().startswith("–±–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"),
    F.text.casefold().startswith("–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç"),
))
async def replenish_bank(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer(HEADER + "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /replenish_bank <—Å—É–º–º–∞>", parse_mode=ParseMode.HTML)
        return

    user_id = message.from_user.id
    try:
        amount = int(args[1])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(HEADER + "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.", parse_mode=ParseMode.HTML)
        return

    user = await get_user(db, user_id)
    if not user:
        await message.answer(HEADER + "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)
        return

    if user["balance"] < amount:
        await message.answer(HEADER + "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.", parse_mode=ParseMode.HTML)
        return

    bank_account = await get_bank_account(db, user_id)
    if not bank_account:
        await message.answer(HEADER + "‚ùó –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /create_bank", parse_mode=ParseMode.HTML)
        return

    new_user_balance = user["balance"] - amount
    new_bank_balance = bank_account["balance"] + amount

    await db.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_user_balance, user_id))
    await db.execute("UPDATE bank_accounts SET balance = ? WHERE user_id = ?", (new_bank_balance, user_id))

    await message.answer(
        HEADER +
        f"‚úÖ –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{amount}</b> PaketCoins.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞: <b>{new_bank_balance}</b> PaketCoins.",
        parse_mode=ParseMode.HTML
    )


@router.message(or_f(
    Command("withdraw_bank"),
    F.text.casefold().startswith("–±–∞–Ω–∫ —Å–Ω—è—Ç—å"),
    F.text.casefold().startswith("—Å–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞"),
))
async def withdraw_bank(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer(HEADER + "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /withdraw_bank <—Å—É–º–º–∞>", parse_mode=ParseMode.HTML)
        return

    user_id = message.from_user.id
    try:
        amount = int(args[1])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(HEADER + "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.", parse_mode=ParseMode.HTML)
        return

    bank_account = await get_bank_account(db, user_id)
    if not bank_account:
        await message.answer(HEADER + "‚ùó –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)
        return

    if bank_account["balance"] < amount:
        await message.answer(HEADER + "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.", parse_mode=ParseMode.HTML)
        return

    user = await get_user(db, user_id)
    new_balance = bank_account["balance"] - amount
    new_user_balance = user["balance"] + amount

    await db.execute("UPDATE bank_accounts SET balance = ? WHERE user_id = ?", (new_balance, user_id))
    await db.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_user_balance, user_id))

    await message.answer(
        HEADER +
        f"‚úÖ –°–æ —Å—á—ë—Ç–∞ —Å–Ω—è—Ç–æ <b>{amount}</b> PaketCoins.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞: <b>{new_balance}</b> PaketCoins.",
        parse_mode=ParseMode.HTML
    )


# --- –î–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á—ë—Ç ---

@router.message(or_f(
    Command("information_deposit"),
    F.text.casefold() == "–¥–µ–ø–æ–∑–∏—Ç –∏–Ω—Ñ–æ",
    F.text.casefold() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ"
))
async def information_deposit_handler(message: Message):
    info_lines = []
    for k, v in DEPOSIT_OPTIONS.items():
        info_lines.append(
            f"‚Ä¢ <b>{k.replace('_', ' ')}</b>: {v['days']} –¥–Ω–µ–π, —Å—Ç–∞–≤–∫–∞ {v['rate']}%, –∫–æ–º–∏—Å—Å–∏—è {v['fee']}%"
        )
    text = HEADER + "üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º:</b>\n\n" + "\n".join(info_lines)
    await message.answer(text, parse_mode=ParseMode.HTML)


@router.message(or_f(
    Command("create_deposit"),
    F.text.casefold().startswith("–¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞—Ç—å"),
))
async def create_deposit_handler(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            HEADER +
            "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_deposit <—Å—Ä–æ–∫>\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏: " + ", ".join(DEPOSIT_OPTIONS.keys()),
            parse_mode=ParseMode.HTML
        )
        return

    term_key = args[1].strip()
    option = DEPOSIT_OPTIONS.get(term_key)
    if not option:
        await message.answer(
            HEADER +
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–æ–∫–∏: " + ", ".join(DEPOSIT_OPTIONS.keys()),
            parse_mode=ParseMode.HTML
        )
        return

    bank_account = await get_bank_account(db, user_id)
    if not bank_account:
        await message.answer(HEADER + "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /create_bank", parse_mode=ParseMode.HTML)
        return

    deposit_account = await get_deposit_account(db, user_id)
    if deposit_account:
        await message.answer(HEADER + "‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç.", parse_mode=ParseMode.HTML)
        return

    if bank_account["balance"] < DEPOSIT_ACCOUNT_OPEN_COST:
        await message.answer(HEADER + f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ ({DEPOSIT_ACCOUNT_OPEN_COST} PaketCoins).", parse_mode=ParseMode.HTML)
        return

    deposit_start = datetime.utcnow().isoformat()

    await db.execute(
        """
        INSERT INTO deposit_accounts (user_id, term_days, percent, commission, start_balance, start_date)
        VALUES (?, ?, ?, ?, ?, ?)
        """,
        (
            user_id,
            option["days"],
            option["rate"],
            option["fee"],
            DEPOSIT_ACCOUNT_OPEN_COST,
            deposit_start
        )
    )

    new_bank_balance = bank_account["balance"] - DEPOSIT_ACCOUNT_OPEN_COST
    await db.execute(
        "UPDATE bank_accounts SET balance = ? WHERE user_id = ?",
        (new_bank_balance, user_id)
    )

    await message.answer(
        HEADER +
        f"üè¶ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—Ä–æ–∫ <b>{term_key.replace('_', ' ')}</b> —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π <b>{option['rate']}%</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç.\n"
        f"–° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {DEPOSIT_ACCOUNT_OPEN_COST} PaketCoins.\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{new_bank_balance}</b> PaketCoins.",
        parse_mode=ParseMode.HTML
    )


@router.message(or_f(
    Command("replenish_deposit"),
    F.text.casefold().startswith("–¥–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å")
))
async def replenish_deposit_handler(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(HEADER + "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /replenish_deposit <—Å—É–º–º–∞>", parse_mode=ParseMode.HTML)
        return

    try:
        amount = int(args[1].strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(HEADER + "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.", parse_mode=ParseMode.HTML)
        return

    bank_account = await get_bank_account(db, user_id)
    if not bank_account:
        await message.answer(HEADER + "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞.", parse_mode=ParseMode.HTML)
        return

    deposit_account = await get_deposit_account(db, user_id)
    if not deposit_account:
        await message.answer(HEADER + "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.", parse_mode=ParseMode.HTML)
        return

    if bank_account["balance"] < amount:
        await message.answer(HEADER + f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ. –ë–∞–ª–∞–Ω—Å: {bank_account['balance']} PaketCoins.", parse_mode=ParseMode.HTML)
        return

    new_bank_balance = bank_account["balance"] - amount
    new_deposit_balance = deposit_account["start_balance"] + amount

    await db.execute(
        "UPDATE bank_accounts SET balance = ? WHERE user_id = ?",
        (new_bank_balance, user_id)
    )
    await db.execute(
        "UPDATE deposit_accounts SET start_balance = ? WHERE user_id = ?",
        (new_deposit_balance, user_id)
    )

    await message.answer(
        HEADER +
        f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{amount}</b> PaketCoins.\n"
        f"–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞: <b>{new_bank_balance}</b>\n"
        f"–ë–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞: <b>{new_deposit_balance}</b> PaketCoins.",
        parse_mode=ParseMode.HTML
    )


@router.message(or_f(
    Command("withdraw_deposit"),
    F.text.casefold().startswith("–¥–µ–ø–æ–∑–∏—Ç —Å–Ω—è—Ç—å")
))
async def withdraw_deposit_handler(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(HEADER + "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /withdraw_deposit <—Å—É–º–º–∞>", parse_mode=ParseMode.HTML)
        return

    try:
        amount = int(args[1].strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(HEADER + "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.", parse_mode=ParseMode.HTML)
        return

    deposit_account = await get_deposit_account(db, user_id)
    if not deposit_account:
        await message.answer(HEADER + "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞.", parse_mode=ParseMode.HTML)
        return

    deposit_days = deposit_account["term_days"]
    deposit_start = datetime.fromisoformat(deposit_account["start_date"])
    elapsed_days = (datetime.utcnow() - deposit_start).days

    if elapsed_days < deposit_days:
        await message.answer(
            HEADER +
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–∞ –µ—â—ë –Ω–µ –∏—Å—Ç—ë–∫.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {deposit_days - elapsed_days}.",
            parse_mode=ParseMode.HTML
        )
        return

    if amount > deposit_account["start_balance"]:
        await message.answer(HEADER + "üö´ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞.", parse_mode=ParseMode.HTML)
        return

    bank_account = await get_bank_account(db, user_id)
    new_deposit_balance = deposit_account["start_balance"] - amount
    new_bank_balance = bank_account["balance"] + amount

    await db.execute(
        "UPDATE deposit_accounts SET start_balance = ? WHERE user_id = ?",
        (new_deposit_balance, user_id)
    )
    await db.execute(
        "UPDATE bank_accounts SET balance = ? WHERE user_id = ?",
        (new_bank_balance, user_id)
    )

    await message.answer(
        HEADER +
        f"‚úÖ –° –¥–µ–ø–æ–∑–∏—Ç–∞ —Å–Ω—è—Ç–æ <b>{amount}</b> PaketCoins.\n"
        f"–ë–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞: <b>{new_deposit_balance}</b>\n"
        f"–ë–∞–ª–∞–Ω—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞: <b>{new_bank_balance}</b>",
        parse_mode=ParseMode.HTML
    )
